name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          NODE_ENV: production
        run: npm run build

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        # if: ${{ VERCEL_TOKEN }}
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 2: Deploy to Production (on tags)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    # defaults:
    #   run:
    #     working-directory: mcq-exam-system

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations (Production)
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: npx prisma migrate deploy

      - name: Build application
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          NODE_ENV: production
        run: npm run build

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        # if: ${{ secrets.VERCEL_TOKEN }}
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 3: Notify Deployment Status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"

      - name: Notify Failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"
          exit 1

  # Job 4: Health Check
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check staging
        if: needs.deploy-staging.result == 'success'
        run: |
          if [ -n "${{ secrets.STAGING_URL }}" ]; then
            curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1
            echo "‚úÖ Staging health check passed"
          else
            echo "‚ö†Ô∏è Staging URL not configured, skipping health check"
          fi

      - name: Health check production
        if: needs.deploy-production.result == 'success'
        run: |
          if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
            curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
            echo "‚úÖ Production health check passed"
          else
            echo "‚ö†Ô∏è Production URL not configured, skipping health check"
          fi


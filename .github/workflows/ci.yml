name: CI Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: mcq-exam-system

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npm run type-check

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: mcq-exam-system

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

  # Job 3: Database Tests
  database:
    name: Database Tests
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: mcq-exam-system

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_eksetasi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_eksetasi?schema=public
          JWT_SECRET: test-jwt-secret-for-ci
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "JWT_SECRET=$JWT_SECRET" >> .env

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_eksetasi?schema=public
        run: npx prisma migrate deploy

  # Job 4: Build & Test
  build:
    name: Build & Test Application
    runs-on: ubuntu-latest
    needs: [lint, security]
    # defaults:
    #   run:
    #     working-directory: mcq-exam-system

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Setup build environment
        run: |
          echo "DATABASE_URL=postgresql://dummy:dummy@localhost:5432/dummy" >> .env
          echo "JWT_SECRET=dummy-jwt-secret-for-build" >> .env

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            package.json
          retention-days: 1

  # Job 5: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, security, database, build]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Security Status: ${{ needs.security.result }}"
          echo "Database Status: ${{ needs.database.result }}"
          echo "Build Status: ${{ needs.build.result }}"

          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.security.result }}" == "failure" || "${{ needs.database.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi
